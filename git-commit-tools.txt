File that documents the changes on the Python and R tools available at NAT
--------------------------------------------------------------------------
Created: 05-Apr-2014
Note: Each entry is a comment used when committing the changes in Git

LEGEND:
- COMMITTED: changes commited in Git
- DEPLOYED: version uploaded and deployed to the NAT server at the Software\Tools directory. (This keyword started in Aug-2014)


commit of Tools: 2014/03/28 - 2014/04/05 [COMMITTED]
----------------------------------------
datamining-functions.r:
- New functions: 
	- ModelFit(), model.fit(): evaluates the fit of a model by each of a set of input variables.
- Updated functions:
	- GroupCategories():
		- it works also for continuous target variable
		- it maps too small categories to the same group "other"
- Bug fixes:
	- GroupCategories()

startup-functions.r:
- New functions:
	- parseVariable(), parse.variable(): parses a variable passed as variable names and/or numeric variables.
		Ex: target="y" or target=tofit$y
- Updated functions:
	- pairs.custom():
		- added a scaling of the points and labels by automatically adjusting the cex and inches parameter received by plot.binned() when this function is called as some of the panel functions. This is to avoid having the points and labels too big w.r.t. the actual plot size in the panel.
		- the target parameter must now be a string referring to a variable name of the data frame used to create the pairs plot.
	- plot.binned():
		- Simplied the specification of the axis formats by removing parameters xlimProperty, ylimProperty, ylim2Property. Now the "new" or "orig" specifications should be directly passed to xlim, ylim, ylim2.
- Bug fixes:
	- Added try-catch statements in the following functions:
		- panel.image() when calling kde2d()
		- plot.binned() when calling lm() and loess() (especially is important for the latter)
		This is to avoid collapse of the pairs.custom() function with its default call or using plot.binned() for the upper.panel function.
	- plot.binned():
		- took care of target variables having NAs (NAs are removed now using complete.cases())
		- fixed error message when target was explicitly passed as target=NULL (changed if (!missing(target)) with if (!is.null(target)))
		- took care of updating the ylim value when a pred variable is passed, so that the pred values fit in the plot.

commit of Tools: 2014/04/05 - 2014/05/05 [COMMITTED]
----------------------------------------
Added git-commit-tools.txt and updated F1 function

datamining-functions.r:
- Updated functions:
	- PrecisionRecall(), F1():
		- new equivalent name for function F1(): PrecisionRecall()
		- extended functionality so that it computes precision and recall for more than one cut-off value
		- generates the plot of Recall vs. Precision

commit of Tools: 2014/04/05 - 2014/05/05 [COMMITTED]
----------------------------------------
New function cumplot() in startup-functions.r

startup-functions.r:
- New functions:
	- cumplot(): Plot of cumulative y vs. cumulative x. Target y can be continuous or binary 0/1.
- Updated functions:
	- In all functions where it was reasonable (basically functions that optionally generate plots), return() statements were replaced with return(invisible()) so that nothing is shown to the user when the return value is not assigned to a variable.

commit of Tools: 2014/05/05 - 2014/05/10 [COMMITTED]
----------------------------------------
Fixed axis issues in pairs.custom() function

startup-function.r:
- Updated functions:
	- pairs.custom():
		- removed parameters addXAxis, addYAxis from the function signature because they are only relevant when one of the panel functions is plot.binned(). These parameters are still set (to FALSE) when plot.binned() is called as one of the panel functions.
		- fixed the problem of asking for NEXT PLOT when the last panel of plots has been displayed.
	- plot.binned():
		- fixed the default parameter value of: addXAxis (to FALSE), addYAxis (to ylim or ylimProperty == "new"), addY2Axis (ditto), so that now, in a pairs plot, y vertical axes are not shown by default unless their axis limits are set to be the "new" ones (after grouping of the x variable). Recall that these parameters only take effect when the plot.binned() function is called from within a pairs plot. Even though I have set these parameters to FALSE within the pairs.custom() function (when the plot.binned() function has been set as a panel function), I still leave this default behaviour in plot.binned() in case I want to change how these parameters are set in pairs.custom() by default in the future.

commit of Tools: 2014/05/10 - 2014/05/11 [COMMITTED]
----------------------------------------
New function plot.outliers2d() and enhanced ModelFit()

startup-function.r:
- New functions:
	- plot.outliers2d(), panel.outliers2d(): plot 2D outliers based on estimated multivariate gaussian density (Ref: Machine Learning course)
- Updated functions:
	- plot.binned():
 		- added logical parameter 'limits' which indicates whether to show the x limits of each bin as vertical gray lines.
		- changed the default value of parameter 'clip' from "figure" to "region" and at the same time I now set par(xpd=TRUE) before showing any text on the graph (such as point labels) so that all text is fully seen.

datamining-function.r:
- Updated functions:
	- ModelFit(), model.fit(): implemented a flexible call to plot.binned() using formals() (to get the parameters present at the signature of the function) and match.call() to get the parameters passed by the user. This is important because I can now use this implementation to better understand the meaning and use of quote() and substitute(). See also the notes in 'R Help.txt' about this matter.


commit of Tools: 2014/05/11 - 2014/05/22 [COMMITTED]
----------------------------------------
Function redistribution, cleaned up documentation

R files: moved function roc.1() from startup-functions.r to datamining-functions.r and renamed it to roc().

startup-function.r:
- Updated functions:
	- plot.dist(): finalized and successfully tested the function, also with a plotting function different from plot() (e.g. plot.binned())
	- pairs.custom(): fixed a bug occurring when target was passed as NULL by replacing 'if (!missing(target))' with 'if (!is.null(target))'.
	
datamining-functions.r:
- Updated functions:
	- GroupCategories(), roc(): replaced paste0() with paste() because paste0() does not exist in version R-2.8.0 used in SPSS.


commit of Tools: 2014/05/22 - 2014/08/10 [COMMITTED AND DEPLOYED]
----------------------------------------
Two new R functions. Updates in R & Python.

startup-functions.r:
- New functions:
	- midpoints(): returns the midpoint of intervals generated by the cut() function.
	- panel.image(): created this function with the same functionality as plot.image() but that should be used to add an image to an existing plot.

- Updated functions:
	- plot.image(): changed parameter add=TRUE to add=FALSE due to the existence of the newly created panel.image() which should be used to add an image to an existing plot.
	- pairs.custom(): changed the default lower.panel= option from plot.image to panel.image()
	- plot.cdf(): changed the way input parameters are handled (now using the match.call() function) so that I don't get any more the error that "argument 'xlab' matched by multiple actual arguments". This error came up when handling the input parameters using 'if (!exist(...))'.
	- plot.bar(): added parameter na.rm=FALSE so that NAs in the x and y variables are NOT excluded by default. In this case NA values in the x variable are considered as a separate valid category; NA values in the y variable are ignored anyway. For more info, see help(table), since this function is where the na.rm value takes effect.
	
datamining-functions.r
- Updated functions:
	- AssignCategories(): small change to correctly align the original groups being joined by appropriately adding \t and spaces in the cat() call at the end.
	- GroupCategories(): added parameter na.rm=FALSE so that NAs in the x variable is considered as a separate valid category. Note that NA values in the y variable are always ignored anyway. For more info, see help(table), since this function is where the na.rm value takes effect.
	
spssmacros.py:
- Updated functions:
	- RemoveNamesFromList(): Replaced the call to spssaux._buildvarlist() with the call to my function dmspssaux.BuildVarListAndString().
	This was done in order to avoid having to keep track whether a list of names (given as a string with one name per line) has an empty string at the beginning and at the end.
	This change implies that every empty line in a list of names (given as a string) are removed after calling RemoveNamesFromList().
	- TransformPercent(): Fixed two errors:
		- when denConditionMiss=None, the expression not(False) appeared in the generated SPSS syntax!
		- when preplace=True and sreplace=False, the suffix was not added to the percent variable name.

spssmacrosR.py:
- Updated functions:
	- RCopyVariables(): Did an easy fix so that also numeric variables can be copied to R. Before this fix, only string variables could be copied because of a limitation that the BuildVarListAndString() function accepts only sequences and STRING variables (due to its call to spssaux._buildvarlist() function which only accepts the aforementioned types of variables).

commit of Tools: 2014/08/11 - 2014/08/25 [COMMITED AND DEPLOYED]
----------------------------------------
spssmacrosR.py now imports dmspssaux.py

dmspssaux.py:
- Better clarified the module description at the top.
- Note that the StartClient_.py script --run at SPSS startup-- now imports the dmspssaux.py module so that the user can directly call functions such as CheckVariables() or Save(), that are defined therein. Note that these functions are not available when importing dmspssaux.py from within spssmacros.py and spssmacrosR.py.

spssmacros.py:
- Changed comments.

spssmacrosR.py:
- Removed functions:
	- BuildVarListAndString(): This function was also defined in dmspssaux.py and is now imported from that module, as is the case with spssmacros.py.

startup-functions.r, datamining-functions.r:
- Enhanced comments.

commit of Tools: 2014/08/25 - 2014/11/04 [COMMITTED]
----------------------------------------
Updated spssmacros.TransformPercent and StartClient_.py

spssmacros.py:
- Updated functions:
	- TransformPercent():
		- Fixed a bug regarding the use of the numConditionMiss parameter (it used the first variable in vars for all percent computations!)
		- Changed default value of numConditionMiss from None to 0, so that by default the percent variable is set to 0 only when BOTH the numerator and denominator variables are 0.

	- StartClient_.py script:
		- Although this file is not in the project, I changed it in the Software\Tools network location in order to set the SPSS locale to English.
		This is done to avoid problems with the decimal point separator in values coming from Python, as happens in ModelCollin() function when reading data from Python using a BEGIN-END DATA block in SPSS (which expects the comma separator when the locale is set to Spanish).
		- Note that I did NOT change my local copy of the file, since my locale is set to English Ireland (en_IE) and I don't want to change this.

commit of Tools: 2014/11/05 - 2014/12/15 [COMMITTED AND DEPLOYED]
----------------------------------------
startup-functions.r: extract(); dmspssaux.py: Save()

startup-functions.r:
- Renamed functions:
	- midpoints() -> extract()
- Updated functions:
	- extract(): (the old midpoints() function)
		- Extended this function to return the midpoint, lower value or upper value of intervals like those returned by the cut() function. Until now, the function returned only the midpoints.
	
dmspssaux.py:
- Updated functions:
	- Save():
		- Extended the functionality so that "any" format other than "SAV" is saved using SAVE TRANSLATE. I enclose "any" in quotes because this was only tested with format="XLS" and format="CSV". Note that before I was only able to save in format="XLS", so the CSV format was now added.

commit of Tools: 2014/12/16 - 2014/01/31 [COMMITTED]
----------------------------------------
plot.cdf(): 'reverse' parameter for "decreasing x" CDF

general: revised and improved TODOs and DONEs in spssmacros.py, spssmacrosR.py, startup-functions.r, datamining-functions.r. 

startup-functions.r:
- Updated functions:
	- plot.cdf(): added the possibility of computing the CDF of x in decreasing order. This is intended to compute the CDF in a manner like the Gains Chart in scoring models, where the top cases are those with higher probabilities.
	This was done with new boolean parameter 'reverse'.

commit of Tools: 2014/02/01 - 2015/02/03 [COMMITTED]
----------------------------------------
plot.binned(): new parameter 'size' for grouped data

startup-functions.r:
- Updated functions:
	- plot.binned(): added parameter 'size' to specify the variable that should be used as size for the symbols() plot when grouped=TRUE.
	Although the circles= and thermometers= options already existed for this purpose (by way of expressions) its functionality doesn't seem to be working properly (since the bubbles are not plotted proportinal to the variable specified in circles=, e.g. circles=expression(x_n), and in addition the size information specified in circles= is NOT used when computing the lm() and loess() fits!)

commit of Tools: 2014/02/04 - 2015/02/04 [COMMITTED]
----------------------------------------
New cdf() function and updated plot.cdf()

startup-functions.r:
- New functions:
	- cdf(): computes the empirical CDF.
- Updated functions:
	- plot.cdf(): added parameter empirical=TRUE so that it computes the empirical CDF instead of the "quantile" CDF. When empirical=TRUE, this function calls the new cdf() function for the computation of the empirical CDF.

commit of Tools: 2014/02/05 - 2015/02/05 [COMMITTED]
----------------------------------------
plot.cdf(): new parameter 'freq'

startup-functions.r:
- Updated functions:
	- plot.cdf(): added parameter freq=FALSE so that the user can request plotting the number of cases in the vertical axis, instead of the cumulative percent of cases.

commit of Tools: 2014/02/06 - 2015/02/10 [COMMITTED]
----------------------------------------
GroupCategories(): added as.vector() when calling plot.bar()

startup-functions.r:
- Updated functions:
	- plot.bar(): when checking for as.matrix(x) or as.data.frame(x) I replaced the | operator with || since we are doing an OR on scalars (| is used for arrays).

datamining-functions.r:
- Updated functions:
	- GroupCategories(): applied the as.vector() function to both parameters x and y when calling my other function plot.bar() (defined in startup-functions.r) because the process stopped running when analyzing a Sequence column (generated by the TraMineR package while working on the Nilo project at NAT) because for some reason the Sequence column yielded TRUE when testing for as.matrix(x) || as.data.frame(x) in function plot.bar()... (strange).

commit of Tools: 2014/02/11 - 2015/02/19 [COMMITTED AND DEPLOYED]
----------------------------------------
New parameter where= in MissingValues()

spssmacros.py:
- Updated functions:
	- MissingValues(): added new parameter where= in order to be able to do the analysis on a subset of the data.


commit of Tools: 2014/02/20 - 2015/03/02 [COMMITTED AND DEPLOYED]
----------------------------------------
New function GetVariableInfo() in dmspssaux

dmspssaux.py:
- New functions:
	- GetVariableInfo(): function that retrieves a specified set of information about an SPSS dataset, such as variable names, variable labels, etc.


commit of Tools: 2015/03/03 - 2015/04/03 [COMMITTED]
----------------------------------------
By default use continuous line (type="o") in plot.binned()

startup-functions.r:
- Updated functions:
	- plot.binned(): replaced default value of 'type2' parameter from "b" to "o" so that the lines for the target variable are shown fully joined.


commit of Tools: 2015/04/04 - 2015/04/16 [COMMITTED]
----------------------------------------
Fixed error in RDistributionsByGroup() when passing stats="" or None

spssmacrosR.r:
- Updated functions:
	- RDistributionsByGroup(): changed the value assigned to parameter 'stats' when the user passes stats=None: before it was set to stats="NULL" and now it is set to stats=""; the reason being that "NULL" was passed to the R function DistributionsByGroup() as a string while it should be passed as the keyword NULL.

datamining-functions.r:
- Updated functions:
	- DistributionsByGroup(): changed the behaviour of the function when stats="": before it meant use the default value of stats (="q5 median q95") and now it means do NOT show any statistics lines on the distributions plot. The change was due to intuition (i.e. intuitively a user could pass stats="" to indicate that they don't want to see any statistics lines on the distribution plot.


commit of Tools: 2015/04/17 - 2015/06/26 [COMMITTED]
----------------------------------------
Fixed bugs in Score() function when variables have missing values

spssmacros.r:
- Updated functions:
	- Score():
		- Fixed a bug when some of the input variables had missing values: the process stopped in the computation of the pred variable because it could not sum a float and a 'None' (missing) (all values of the pred variable were left to missing after such a case was encountered.)
		- In the process that computes the pred value, added the same check I do on categorical variables inside the loop, right after the loop so that this check is performed also to the last analyzed variable (in case it is categorical). Note that the described situation of having the last analyzed variable as categorical is very rare (either all variables are categorical or when sorting alphabetically, the last variable is categorical).
		- Created a new internal function called CheckCategoricalVariableValue() to avoid repeating the same piece of code in two different places in the function.
		- Improved comments describing the process that computes the pred value.


commit of Tools: 2015/04/27 - 2015/07/04 [COMMITTED]
----------------------------------------
Removed intermediate EXECUTE statements from PartialPlot()

spssmacros.r:
- Updated functions:
	- PartialPlot():
		- Removed unnecessary intermediate EXECUTE statements in order to avoid unnecessary pass through the data! (as suggested by Jon Peck).
		Note that this does NOT imply removing all intermediate EXECUTE statements. There is one that I had to keep when creating the @rsquares dataset, but I don't understand why...
		- Added a new ADD FILES statement to keep just the variables that are used during the partial plot calculation. This was done in an attempt to make the process faster as the number of variables stored in the input dataset may be potentially large and since (a copy of) the input dataset is updated during the process by adding new variables, I want to reduce as much as possible the time needed for those updates.
		- Moved the application of any WHERE conditions after verifying that it makes sense to continue with the process (i.e. that variable 'error' is not False) in order to avoid executing these conditions when they are not necessary because the process will in any case abort.

spssmacrosR.r:
	- Completed a truncated comment that I had written on what the RCopyVariables() function does.

datamining-functions.r:
	- Added one TODO task to AssignCategories() and one to GroupCategories().


commit of Tools: 2015/07/05 - 2015/07/05 [COMMITTED]
----------------------------------------
Implemented piecewise linear WOE variables in InformationValue()

datamining-functions.r:
- Updated functions:
	- InformationValue():
		- Three new parameters:
			- woeprefix, woesuffix: to specify the prefix and suffix for the WOE variables to create.
			- woevartype: to specify what type of WOE variables to create, whether constant piecewise (traditional way, done by TIMi) or piecewise linear (new way proposed by Maria Teresa from NAT).
		- Implemented the code to create piecewise linear WOE variables as suggested by Maria Teresa.


commit of Tools: 2015/07/06 - 2016/01/19 [COMMITTED]
----------------------------------------
Fixed error in InformationValue() on cat variables

datamining-functions.r:
- Updated functions:
	- InformationValue(): fixed an error that occurred when categorical variables had more levels than found in the analyzed data. This may happen because the variable used to have certain values which they don't longer have. This was easily solved by keeping in the frequency table those entries that have frequency > 0.

startup-functions.r:
- Updated functions:
	- whos():
		- Now shows information to the user that the object sizes are reported in bytes.
	- renamed midpoints() as extract() because we can extract not only the midpoints of the intervals.
